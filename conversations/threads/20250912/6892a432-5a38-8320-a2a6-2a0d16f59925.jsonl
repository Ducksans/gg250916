{"type": "meta", "title": "리눅스 쉘 스크립트 작성법", "thread_id": "6892a432-5a38-8320-a2a6-2a0d16f59925", "created_at": 1754440758118.4521, "updated_at": 1756185827079.477}
{"type": "turn", "turn": 1, "role": "user", "text": "리눅스에서 쉘 스크립트는 어떻게 작성하는가?", "ts": 1754440757280, "meta": {}}
{"type": "turn", "turn": 2, "role": "assistant", "text": "물론입니다, 덕산님. 아래는 옵시디언에 바로 붙여넣을 수 있도록 **검은색 마크다운 박스** 안에 담은 쉘 스크립트 작성법 설명입니다:\n\n````markdown\n# 🐚 리눅스에서 쉘 스크립트 작성 방법\n\n## 1️⃣ 쉘 스크립트란?\n\n- **쉘(Shell)**: 사용자가 운영체제에 명령을 내릴 수 있게 해주는 인터페이스\n- **쉘 스크립트(Shell Script)**: 쉘 명령어들을 순서대로 나열한 **자동 실행 파일**\n\n---\n\n## 2️⃣ 기본 형식\n\n쉘 스크립트는 일반적인 텍스트 파일이며, `.sh` 확장자를 주로 사용합니다.\n\n```bash\n#!/bin/bash\n# 👆 shebang (쉘 해석기 지정)\n\necho \"Hello, world!\"\n```\n\n---\n\n## 3️⃣ 작성 방법 (순서)\n\n1. **스크립트 파일 생성**\n```bash\nnano hello.sh    # 또는 vi hello.sh\n```\n\n2. **내용 입력**\n```bash\n#!/bin/bash\necho \"안녕하세요, 덕산님!\"\n```\n\n3. **실행 권한 부여**\n```bash\nchmod +x hello.sh\n```\n\n4. **스크립트 실행**\n```bash\n./hello.sh\n```\n\n---\n\n## 4️⃣ 자주 사용하는 구문 예시\n\n| 기능 | 예시 |\n|------|------|\n| 변수 선언 | `name=\"덕산\"` |\n| 변수 사용 | `echo $name` |\n| 조건문 | `if [ $name == \"덕산\" ]; then ... fi` |\n| 반복문 | `for i in {1..5}; do echo $i; done` |\n| 인자 사용 | `$0, $1, $2 ...` → `$0`은 파일명, `$1`은 첫 번째 인자 |\n\n---\n\n## 5️⃣ 실행 예시\n\n```bash\n#!/bin/bash\necho \"스크립트 이름: $0\"\necho \"첫 번째 인자: $1\"\necho \"두 번째 인자: $2\"\n```\n\n```bash\n$ ./myscript.sh 금강 최고\n스크립트 이름: ./myscript.sh\n첫 번째 인자: 금강\n두 번째 인자: 최고\n```\n\n---\n\n## 6️⃣ 꿀팁\n\n- `#!/bin/bash`는 항상 맨 위에!\n- `set -e`를 넣으면 중간에 오류 발생 시 즉시 종료됨\n- `bash -x script.sh`로 실행하면 **디버깅 모드**\n\n---\n\n## 📌 용어 정리\n\n| 용어 | 설명 |\n|------|------|\n| shebang (`#!`) | 어떤 쉘로 실행할지 지정 (예: `/bin/bash`) |\n| chmod +x | 실행 권한 부여 (`x`는 execute) |\n| $1, $2 | 명령행 인자 |\n\n---\n\n## 📚 참고\n\n- 쉘 종류는 다양함: `bash`, `zsh`, `sh`, `fish` 등\n- 리눅스 배포판에 따라 기본 쉘이 다를 수 있음\n````\n\n필요하시면 `조건문`, `반복문`, `함수` 같은 고급 예제도 바로 추가해드릴게요.", "ts": 1754440757706.922, "meta": {}}
{"type": "turn", "turn": 3, "role": "user", "text": "리눅스 에서 if 조건문은 어떻게 쓰는가?", "ts": 1754441083801, "meta": {}}
{"type": "turn", "turn": 4, "role": "assistant", "text": "물론입니다, 덕산님. 아래에 **옵시디언에 바로 붙여넣을 수 있는 마크다운 박스**로 `if` 조건문의 사용법을 정리해드릴게요:\n\n````markdown\n# 🔍 리눅스에서 `if` 조건문 사용법\n\n## ✅ 기본 문법\n\n```bash\nif [ 조건 ]\nthen\n    실행할_명령어\nfi\n```\n\n또는 줄 바꿈 없이 한 줄로도 작성 가능:\n\n```bash\nif [ 조건 ]; then 실행할_명령어; fi\n```\n\n---\n\n## 🔧 예제 1: 숫자 비교\n\n```bash\n#!/bin/bash\n\nnum=10\n\nif [ $num -gt 5 ]; then\n    echo \"$num 은 5보다 큽니다\"\nfi\n```\n\n### 📘 숫자 비교 연산자\n\n| 연산자 | 의미        |\n|--------|-------------|\n| `-eq`  | 같음        |\n| `-ne`  | 같지 않음   |\n| `-gt`  | 큼 (greater than)  |\n| `-lt`  | 작음 (less than)   |\n| `-ge`  | 크거나 같음 |\n| `-le`  | 작거나 같음 |\n\n---\n\n## 🔧 예제 2: 문자열 비교\n\n```bash\n#!/bin/bash\n\nname=\"금강\"\n\nif [ \"$name\" == \"금강\" ]; then\n    echo \"반가워요, 금강님!\"\nfi\n```\n\n### 📘 문자열 비교 연산자\n\n| 연산자   | 의미         |\n|----------|--------------|\n| `==`     | 같음         |\n| `!=`     | 같지 않음    |\n| `-z str` | 문자열이 비었는가 |\n| `-n str` | 문자열이 비어있지 않은가 |\n\n---\n\n## 🔧 예제 3: 파일 존재 여부 확인\n\n```bash\n#!/bin/bash\n\nif [ -f \"./hello.txt\" ]; then\n    echo \"파일이 존재합니다.\"\nelse\n    echo \"파일이 없습니다.\"\nfi\n```\n\n### 📘 파일 조건 연산자\n\n| 연산자 | 의미                  |\n|--------|-----------------------|\n| `-e`   | 파일/디렉토리 존재    |\n| `-f`   | 일반 파일인지 확인     |\n| `-d`   | 디렉토리인지 확인     |\n| `-r`   | 읽기 권한 있음        |\n| `-w`   | 쓰기 권한 있음        |\n| `-x`   | 실행 권한 있음        |\n\n---\n\n## 🔧 예제 4: else if (`elif`) 사용\n\n```bash\n#!/bin/bash\n\nscore=85\n\nif [ $score -ge 90 ]; then\n    echo \"수\"\nelif [ $score -ge 80 ]; then\n    echo \"우\"\nelse\n    echo \"재시험...\"\nfi\n```\n\n---\n\n## 📌 꿀팁\n\n- 조건 양쪽의 **대괄호와 변수는 띄어쓰기 필수**\n  ```bash\n  if [ $a -eq 1 ]; then ...\n  ```\n- `(( ))`나 `[[ ]]`도 가능하지만, `sh` 대신 `bash`에서 더 잘 작동\n\n---\n\n## 📚 참고\n\n- `bash` 스크립트에서만 가능한 문법도 있으니, 항상 `#!/bin/bash`로 시작하는 것이 안정적입니다.\n````\n\n필요하시면 `[[ ]]`, `(( ))`, `case` 구문 등도 추가로 정리해드릴게요.", "ts": 1754441084134.45, "meta": {}}
