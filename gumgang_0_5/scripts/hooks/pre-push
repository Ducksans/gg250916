#!/usr/bin/env bash
# Gumgang 2.0 — pre-push guard hook (template)
# Purpose:
#   - Run reconcile checks before push to prevent audit/manifest drift
#   - Enforce (block) on failure when configured by repo config or environment
#
# Installation (from repo root):
#   ln -sf "$(git rev-parse --show-toplevel)/scripts/hooks/pre-push" "$(git rev-parse --git-path hooks)/pre-push"
#   chmod +x "$(git rev-parse --git-path hooks)/pre-push"
#
# Enforcement policy (any of the below enables blocking on failures):
#   1) Repository config: protocol_config_v3.json -> guard_enforce.push = true
#   2) Environment variable: GUARD_ENFORCE_PUSH=1
#
# Optional settings:
#   GUARD_RECONCILE_MINUTES=60      # Lookback window (minutes)
#   GUARD_RECONCILE_FIX_TS=1        # Attempt to auto-fix '미확인' timestamps (if supported by reconcile script)
#
# Exit codes:
#   0: allow push
#   1: block push (when enforcement active and reconcile reports issues)
#
set -euo pipefail

msg()  { printf "\033[1;34m[pre-push]\033[0m %s\n" "$*"; }
ok()   { printf "\033[1;32m[ok]\033[0m %s\n" "$*"; }
warn() { printf "\033[1;33m[warn]\033[0m %s\n" "$*"; }
err()  { printf "\033[1;31m[err]\033[0m %s\n" "$*" >&2; }

# Resolve repo root
if ! ROOT="$(git rev-parse --show-toplevel 2>/dev/null)"; then
  err "Not a git repository. Skipping guard reconcile."
  exit 0
fi

cd "${ROOT}"

# Detect Python
PYTHON_BIN=""
if [[ -x "${ROOT}/.venv/bin/python" ]]; then
  PYTHON_BIN="${ROOT}/.venv/bin/python"
elif command -v python3 >/dev/null 2>&1; then
  PYTHON_BIN="python3"
elif command -v python >/dev/null 2>&1; then
  PYTHON_BIN="python"
else
  warn "No python interpreter found. Skipping guard reconcile."
  exit 0
fi

CONF_FILE="${ROOT}/protocol_config_v3.json"
RECONCILE="${ROOT}/scripts/guard_reconcile.py"

# Read repo-level enforcement flag if config exists
ENFORCE_PUSH_CFG="0"
if [[ -f "${CONF_FILE}" ]]; then
  # Use Python to parse JSON reliably
  set +e
  ENFORCE_PUSH_CFG="$("${PYTHON_BIN}" - <<'PY'
import json,sys,os
p = os.environ.get("CONF_FILE")
try:
    with open(p, "r", encoding="utf-8") as f:
        cfg = json.load(f)
    flag = bool(((cfg or {}).get("guard_enforce") or {}).get("push", False))
    print("1" if flag else "0")
except Exception:
    print("0")
PY
  )"
  rc=$?
  set -e
  if [[ ${rc} -ne 0 ]]; then
    warn "Failed to parse ${CONF_FILE}; assuming guard_enforce.push = false"
    ENFORCE_PUSH_CFG="0"
  fi
else
  warn "Config not found: ${CONF_FILE} — relying on environment only."
fi

# Environment override
ENFORCE_PUSH_ENV="${GUARD_ENFORCE_PUSH:-0}"

# Final enforcement decision: config OR env
ENFORCE_PUSH="0"
if [[ "${ENFORCE_PUSH_CFG}" == "1" || "${ENFORCE_PUSH_ENV}" == "1" ]]; then
  ENFORCE_PUSH="1"
fi

# If reconcile script missing, only warn (never block)
if [[ ! -f "${RECONCILE}" ]]; then
  warn "Reconcile script not found: ${RECONCILE}. Skipping."
  exit 0
fi

# Build arguments
MINUTES="${GUARD_RECONCILE_MINUTES:-60}"
ARGS=( "--minutes" "${MINUTES}" )
if [[ "${GUARD_RECONCILE_FIX_TS:-0}" == "1" ]]; then
  ARGS+=( "--fix-missing-ts" )
fi

# Strict mode when enforcement active
if [[ "${ENFORCE_PUSH}" == "1" ]]; then
  ARGS+=( "--strict" )
  msg "Running reconcile with enforcement (strict). Lookback=${MINUTES}m"
else
  msg "Running reconcile (non-strict). Lookback=${MINUTES}m"
fi

# Run reconcile
set +e
"${PYTHON_BIN}" "${RECONCILE}" "${ARGS[@]}"
RC=$?
set -e

if [[ "${ENFORCE_PUSH}" == "1" ]]; then
  if [[ ${RC} -ne 0 ]]; then
    err "Reconcile reported issues. Push is blocked by enforcement."
    err "To view details, run: ${PYTHON_BIN} scripts/guard_reconcile.py ${ARGS[*]}"
    exit 1
  fi
  ok "Reconcile OK. Push allowed (enforcement active)."
else
  if [[ ${RC} -ne 0 ]]; then
    warn "Reconcile reported issues. Push allowed (non-strict)."
    warn "Consider fixing before push. Details: ${PYTHON_BIN} scripts/guard_reconcile.py ${ARGS[*]}"
    exit 0
  fi
  ok "Reconcile OK. Push allowed."
fi

exit 0
