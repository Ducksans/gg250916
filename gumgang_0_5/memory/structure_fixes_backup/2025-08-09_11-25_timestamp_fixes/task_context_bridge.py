#!/usr/bin/env python3
"""
Task Context Bridge System v1.0
================================
ÏôÑÎ≤ΩÌïú ÏÑ∏ÏÖò Ïó∞ÏÜçÏÑ±ÏùÑ ÏúÑÌïú Ïª®ÌÖçÏä§Ìä∏ Î∏åÎ¶¨ÏßÄ ÏãúÏä§ÌÖú

Ïù¥ ÏãúÏä§ÌÖúÏùÄ LLMÏùò Íµ¨Ï°∞Ï†Å ÌïúÍ≥Ñ(ÏÑ∏ÏÖò Í∞Ñ Ïª®ÌÖçÏä§Ìä∏ ÏÜêÏã§)Î•º ÏôÑÏ†ÑÌûà Í∑πÎ≥µÌï©ÎãàÎã§.
Î™®Îì† TaskÎäî ÏãúÏûëÍ≥º Ï¢ÖÎ£å Ïãú ÏûêÎèôÏúºÎ°ú Î¨∏ÏÑúÎ•º ÏóÖÎç∞Ïù¥Ìä∏ÌïòÎ©∞,
ÏÉàÎ°úÏö¥ AI ÏÑ∏ÏÖòÏù¥ ÏôÑÎ≤ΩÌïòÍ≤å ÏûëÏóÖÏùÑ Ïù¥Ïñ¥Î∞õÏùÑ Ïàò ÏûàÎèÑÎ°ù Ìï©ÎãàÎã§.
"""

import json
import os
import sys
import hashlib
import subprocess
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict, field
from enum import Enum
import sqlite3
import difflib
import traceback

# Task ÏÉÅÌÉú Enum
class TaskPhase(Enum):
    INITIALIZED = "initialized"
    STARTED = "started"
    IN_PROGRESS = "in_progress"
    TESTING = "testing"
    COMPLETED = "completed"
    FAILED = "failed"
    ROLLED_BACK = "rolled_back"

@dataclass
class FileChange:
    """ÌååÏùº Î≥ÄÍ≤Ω ÏÇ¨Ìï≠ Ï∂îÏ†Å"""
    path: str
    action: str  # created, modified, deleted
    before_hash: Optional[str]
    after_hash: Optional[str]
    lines_added: int = 0
    lines_removed: int = 0
    timestamp: datetime = field(default_factory=datetime.now)

@dataclass
class Decision:
    """ÏùòÏÇ¨Í≤∞Ï†ï Í∏∞Î°ù"""
    id: str
    description: str
    rationale: str
    alternatives: List[str]
    chosen: str
    timestamp: datetime
    impact: str  # low, medium, high

@dataclass
class Problem:
    """Î∞úÏÉùÌïú Î¨∏Ï†úÏôÄ Ìï¥Í≤∞Ï±Ö"""
    id: str
    description: str
    error_message: Optional[str]
    solution: Optional[str]
    resolved: bool
    timestamp: datetime
    retry_count: int = 0

@dataclass
class TaskContext:
    """Task Ïã§Ìñâ Ïª®ÌÖçÏä§Ìä∏"""
    task_id: str
    task_name: str
    phase: TaskPhase
    started_at: datetime
    completed_at: Optional[datetime]

    # ÏßÑÌñâ ÏÉÅÌô©
    progress: int
    current_step: str
    next_steps: List[str]

    # Î≥ÄÍ≤Ω ÏÇ¨Ìï≠
    file_changes: List[FileChange]

    # ÏùòÏÇ¨Í≤∞Ï†ï
    decisions: List[Decision]

    # Î¨∏Ï†ú Î∞è Ìï¥Í≤∞
    problems: List[Problem]

    # Î™ÖÎ†πÏñ¥ Ïã§Ìñâ Í∏∞Î°ù
    commands_executed: List[Dict[str, Any]]

    # ÌÖåÏä§Ìä∏ Í≤∞Í≥º
    test_results: Dict[str, Any]

    # ÌôòÍ≤Ω ÏÉÅÌÉú
    environment: Dict[str, Any]

    # Î©îÌä∏Î¶≠
    metrics: Dict[str, Any]

    # Ï§ëÏöî ÎÖ∏Ìä∏
    notes: List[str]

    # Î°§Î∞± Ï†ïÎ≥¥
    rollback_points: List[str]

    def to_dict(self):
        data = asdict(self)
        data['phase'] = self.phase.value
        data['started_at'] = self.started_at.isoformat()
        if self.completed_at:
            data['completed_at'] = self.completed_at.isoformat()
        return data

class TaskContextBridge:
    """Task Context Bridge - ÏÑ∏ÏÖò Í∞Ñ ÏôÑÎ≤ΩÌïú Ïó∞ÏÜçÏÑ± Î≥¥Ïû•"""

    def __init__(self, project_root: Path = None):
        self.project_root = project_root or Path("/home/duksan/Î∞îÌÉïÌôîÎ©¥/gumgang_0_5")
        self.context_dir = self.project_root / "task_contexts"
        self.bridge_file = self.project_root / "TASK_CONTEXT_BRIDGE.md"
        self.registry_file = self.project_root / "task_tracking/master_registry.json"
        self.db_file = self.project_root / "task_context.db"

        # ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
        self.context_dir.mkdir(exist_ok=True)

        # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî
        self.init_database()

        # ÌòÑÏû¨ Ïª®ÌÖçÏä§Ìä∏
        self.current_context: Optional[TaskContext] = None

        # ÌååÏùº Í∞êÏãú Î™©Î°ù
        self.watched_files: Dict[str, str] = {}  # path -> hash

    def init_database(self):
        """SQLite Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî"""
        conn = sqlite3.connect(self.db_file)
        cursor = conn.cursor()

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS task_contexts (
                task_id TEXT PRIMARY KEY,
                task_name TEXT,
                phase TEXT,
                started_at TIMESTAMP,
                completed_at TIMESTAMP,
                progress INTEGER,
                current_step TEXT,
                context_json TEXT,
                bridge_document TEXT
            )
        ''')

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS file_changes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                task_id TEXT,
                file_path TEXT,
                action TEXT,
                before_hash TEXT,
                after_hash TEXT,
                lines_added INTEGER,
                lines_removed INTEGER,
                timestamp TIMESTAMP,
                FOREIGN KEY (task_id) REFERENCES task_contexts(task_id)
            )
        ''')

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS decisions (
                id TEXT PRIMARY KEY,
                task_id TEXT,
                description TEXT,
                rationale TEXT,
                chosen TEXT,
                impact TEXT,
                timestamp TIMESTAMP,
                FOREIGN KEY (task_id) REFERENCES task_contexts(task_id)
            )
        ''')

        conn.commit()
        conn.close()

    def start_task(self, task_id: str, task_name: str) -> TaskContext:
        """Task ÏãúÏûë Ïãú Ïª®ÌÖçÏä§Ìä∏ ÏÉùÏÑ± Î∞è Î¨∏ÏÑú ÏóÖÎç∞Ïù¥Ìä∏"""
        print(f"\nüöÄ Task ÏãúÏûë: {task_id} - {task_name}")

        # Í∏∞Ï°¥ Ïª®ÌÖçÏä§Ìä∏ Ï¢ÖÎ£å
        if self.current_context:
            self.complete_task()

        # ÏÉà Ïª®ÌÖçÏä§Ìä∏ ÏÉùÏÑ±
        self.current_context = TaskContext(
            task_id=task_id,
            task_name=task_name,
            phase=TaskPhase.STARTED,
            started_at=datetime.now(),
            completed_at=None,
            progress=0,
            current_step="Ï¥àÍ∏∞Ìôî",
            next_steps=[],
            file_changes=[],
            decisions=[],
            problems=[],
            commands_executed=[],
            test_results={},
            environment=self.capture_environment(),
            metrics={},
            notes=[],
            rollback_points=[]
        )

        # Ï¥àÍ∏∞ ÌååÏùº ÏÉÅÌÉú Ï∫°Ï≤ò
        self.capture_file_state()

        # Task Registry ÏóÖÎç∞Ïù¥Ìä∏
        self.update_task_registry("started")

        # Bridge Î¨∏ÏÑú ÏÉùÏÑ±
        self.generate_bridge_document()

        # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû•
        self.save_to_database()

        print(f"‚úÖ Task Ïª®ÌÖçÏä§Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å")
        return self.current_context

    def update_progress(self, progress: int, current_step: str, next_steps: List[str] = None):
        """ÏßÑÌñâ ÏÉÅÌô© ÏóÖÎç∞Ïù¥Ìä∏"""
        if not self.current_context:
            return

        self.current_context.progress = progress
        self.current_context.current_step = current_step
        if next_steps:
            self.current_context.next_steps = next_steps

        # ÏûêÎèôÏúºÎ°ú Bridge Î¨∏ÏÑú ÏóÖÎç∞Ïù¥Ìä∏
        self.generate_bridge_document()
        self.save_to_database()

    def record_file_change(self, file_path: str, action: str):
        """ÌååÏùº Î≥ÄÍ≤Ω ÏÇ¨Ìï≠ Í∏∞Î°ù"""
        if not self.current_context:
            return

        full_path = self.project_root / file_path
        before_hash = self.watched_files.get(file_path)
        after_hash = None

        if full_path.exists() and action != "deleted":
            after_hash = self.calculate_file_hash(full_path)

        # Î≥ÄÍ≤ΩÎêú Ï§Ñ Ïàò Í≥ÑÏÇ∞
        lines_added, lines_removed = 0, 0
        if action == "modified" and before_hash and after_hash:
            lines_added, lines_removed = self.calculate_diff_stats(full_path)

        change = FileChange(
            path=file_path,
            action=action,
            before_hash=before_hash,
            after_hash=after_hash,
            lines_added=lines_added,
            lines_removed=lines_removed
        )

        self.current_context.file_changes.append(change)
        self.watched_files[file_path] = after_hash

    def record_decision(self, description: str, rationale: str,
                       alternatives: List[str], chosen: str, impact: str = "medium"):
        """ÏùòÏÇ¨Í≤∞Ï†ï Í∏∞Î°ù"""
        if not self.current_context:
            return

        decision = Decision(
            id=f"DEC-{datetime.now().strftime('%H%M%S')}",
            description=description,
            rationale=rationale,
            alternatives=alternatives,
            chosen=chosen,
            timestamp=datetime.now(),
            impact=impact
        )

        self.current_context.decisions.append(decision)
        self.current_context.notes.append(f"üìå Í≤∞Ï†ï: {description} -> {chosen}")

    def record_problem(self, description: str, error_message: str = None):
        """Î¨∏Ï†ú Î∞úÏÉù Í∏∞Î°ù"""
        if not self.current_context:
            return

        problem = Problem(
            id=f"PROB-{datetime.now().strftime('%H%M%S')}",
            description=description,
            error_message=error_message,
            solution=None,
            resolved=False,
            timestamp=datetime.now()
        )

        self.current_context.problems.append(problem)
        return problem.id

    def record_solution(self, problem_id: str, solution: str):
        """Î¨∏Ï†ú Ìï¥Í≤∞ Í∏∞Î°ù"""
        if not self.current_context:
            return

        for problem in self.current_context.problems:
            if problem.id == problem_id:
                problem.solution = solution
                problem.resolved = True
                self.current_context.notes.append(f"‚úÖ Ìï¥Í≤∞: {problem.description}")
                break

    def record_command(self, command: str, output: str, exit_code: int):
        """Î™ÖÎ†πÏñ¥ Ïã§Ìñâ Í∏∞Î°ù"""
        if not self.current_context:
            return

        self.current_context.commands_executed.append({
            'command': command,
            'output': output[:500],  # Ï≤òÏùå 500ÏûêÎßå
            'exit_code': exit_code,
            'timestamp': datetime.now().isoformat()
        })

    def add_rollback_point(self, description: str):
        """Î°§Î∞± Ìè¨Ïù∏Ìä∏ Ï∂îÍ∞Ä"""
        if not self.current_context:
            return

        rollback_id = f"RB-{datetime.now().strftime('%H%M%S')}"
        self.current_context.rollback_points.append(f"{rollback_id}: {description}")

        # Ï≤¥ÌÅ¨Ìè¨Ïù∏Ìä∏ ÏÉùÏÑ± Î™ÖÎ†π Ïã§Ìñâ
        subprocess.run([
            'python', 'protocol_guard_v3.py',
            '--checkpoint', rollback_id
        ], cwd=self.project_root)

    def complete_task(self, success: bool = True):
        """Task ÏôÑÎ£å Ïãú ÏµúÏ¢Ö Î¨∏ÏÑú ÏóÖÎç∞Ïù¥Ìä∏"""
        if not self.current_context:
            return

        self.current_context.completed_at = datetime.now()
        self.current_context.phase = TaskPhase.COMPLETED if success else TaskPhase.FAILED
        self.current_context.progress = 100 if success else self.current_context.progress

        # ÏµúÏ¢Ö Bridge Î¨∏ÏÑú ÏÉùÏÑ±
        self.generate_bridge_document(final=True)

        # Task Registry ÏóÖÎç∞Ïù¥Ìä∏
        self.update_task_registry("completed" if success else "failed")

        # Í∞úÎ≥Ñ Task Î¨∏ÏÑú ÏÉùÏÑ±
        self.generate_task_document()

        # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû•
        self.save_to_database()

        print(f"‚úÖ Task {self.current_context.task_id} ÏôÑÎ£å Î¨∏ÏÑúÌôî")

        # Ïª®ÌÖçÏä§Ìä∏ Ï¥àÍ∏∞Ìôî
        self.current_context = None

    def generate_bridge_document(self, final: bool = False):
        """Bridge Î¨∏ÏÑú ÏÉùÏÑ± - ÏÉà AIÍ∞Ä ÏùΩÏùÑ ÌïµÏã¨ Î¨∏ÏÑú"""
        if not self.current_context:
            return

        doc = []
        doc.append("# üåâ TASK CONTEXT BRIDGE")
        doc.append(f"**Generated**: {datetime.now().isoformat()}")
        doc.append(f"**Task**: {self.current_context.task_id} - {self.current_context.task_name}")
        doc.append(f"**Phase**: {self.current_context.phase.value}")
        doc.append(f"**Progress**: {self.current_context.progress}%")
        doc.append("")

        # 1. Ï¶âÏãú Ïã§Ìñâ Î™ÖÎ†π
        doc.append("## üö® ÏÉà ÏÑ∏ÏÖò ÏãúÏûë Ïãú Ï¶âÏãú Ïã§Ìñâ")
        doc.append("```bash")
        doc.append("cd /home/duksan/Î∞îÌÉïÌôîÎ©¥/gumgang_0_5")
        doc.append("python protocol_guard_v3.py --status")
        doc.append("python task_context_bridge.py --resume")
        doc.append("```")
        doc.append("")

        # 2. ÌòÑÏû¨ ÏÉÅÌô©
        doc.append("## üìä ÌòÑÏû¨ ÏÉÅÌô©")
        doc.append(f"- **ÌòÑÏû¨ Îã®Í≥Ñ**: {self.current_context.current_step}")
        doc.append(f"- **ÏãúÏûë ÏãúÍ∞Ñ**: {self.current_context.started_at.isoformat()}")
        if self.current_context.completed_at:
            doc.append(f"- **ÏôÑÎ£å ÏãúÍ∞Ñ**: {self.current_context.completed_at.isoformat()}")
        doc.append("")

        # 3. Îã§Ïùå Îã®Í≥Ñ
        if self.current_context.next_steps:
            doc.append("## ‚û°Ô∏è Îã§Ïùå ÏûëÏóÖ")
            for step in self.current_context.next_steps:
                doc.append(f"1. {step}")
            doc.append("")

        # 4. Î≥ÄÍ≤ΩÎêú ÌååÏùº
        if self.current_context.file_changes:
            doc.append("## üìù Î≥ÄÍ≤ΩÎêú ÌååÏùº")
            for change in self.current_context.file_changes[-10:]:  # ÏµúÍ∑º 10Í∞ú
                emoji = {"created": "‚ú®", "modified": "üìù", "deleted": "üóëÔ∏è"}.get(change.action, "üìÑ")
                doc.append(f"- {emoji} `{change.path}` ({change.action})")
                if change.lines_added or change.lines_removed:
                    doc.append(f"  - Ï∂îÍ∞Ä: +{change.lines_added}, ÏÇ≠Ï†ú: -{change.lines_removed}")
            doc.append("")

        # 5. Ï£ºÏöî Í≤∞Ï†ïÏÇ¨Ìï≠
        if self.current_context.decisions:
            doc.append("## üéØ Ï£ºÏöî Í≤∞Ï†ïÏÇ¨Ìï≠")
            for decision in self.current_context.decisions[-5:]:  # ÏµúÍ∑º 5Í∞ú
                doc.append(f"- **{decision.description}**")
                doc.append(f"  - ÏÑ†ÌÉù: {decision.chosen}")
                doc.append(f"  - Ïù¥Ïú†: {decision.rationale}")
            doc.append("")

        # 6. Î∞úÏÉùÌïú Î¨∏Ï†ú
        unresolved = [p for p in self.current_context.problems if not p.resolved]
        if unresolved:
            doc.append("## ‚ö†Ô∏è ÎØ∏Ìï¥Í≤∞ Î¨∏Ï†ú")
            for problem in unresolved:
                doc.append(f"- {problem.description}")
                if problem.error_message:
                    doc.append(f"  ```")
                    doc.append(f"  {problem.error_message}")
                    doc.append(f"  ```")
            doc.append("")

        # 7. Ïã§ÌñâÎêú Î™ÖÎ†πÏñ¥
        if self.current_context.commands_executed:
            doc.append("## üíª ÏµúÍ∑º Ïã§Ìñâ Î™ÖÎ†πÏñ¥")
            for cmd in self.current_context.commands_executed[-5:]:  # ÏµúÍ∑º 5Í∞ú
                status = "‚úÖ" if cmd['exit_code'] == 0 else "‚ùå"
                doc.append(f"- {status} `{cmd['command']}`")
            doc.append("")

        # 8. Î°§Î∞± Ìè¨Ïù∏Ìä∏
        if self.current_context.rollback_points:
            doc.append("## üîÑ Î°§Î∞± Ìè¨Ïù∏Ìä∏")
            for point in self.current_context.rollback_points:
                doc.append(f"- {point}")
            doc.append("")

        # 9. Ï§ëÏöî ÎÖ∏Ìä∏
        if self.current_context.notes:
            doc.append("## üìå Ï§ëÏöî ÎÖ∏Ìä∏")
            for note in self.current_context.notes[-10:]:  # ÏµúÍ∑º 10Í∞ú
                doc.append(f"- {note}")
            doc.append("")

        # 10. ÌôòÍ≤Ω Ï†ïÎ≥¥
        doc.append("## üåç ÌôòÍ≤Ω Ï†ïÎ≥¥")
        doc.append(f"- Backend: http://localhost:8001")
        doc.append(f"- Frontend: http://localhost:3000")
        doc.append(f"- Protocol Guard: v3.0")
        doc.append("")

        # 11. ÏûëÏóÖ Ïû¨Í∞ú Î∞©Î≤ï
        if not final:
            doc.append("## üîÑ ÏûëÏóÖ Ïû¨Í∞ú Î∞©Î≤ï")
            doc.append("```python")
            doc.append("from task_context_bridge import TaskContextBridge")
            doc.append("bridge = TaskContextBridge()")
            doc.append(f"context = bridge.resume_task('{self.current_context.task_id}')")
            doc.append("# ÏûëÏóÖ Í≥ÑÏÜç...")
            doc.append("```")

        # ÌååÏùº Ï†ÄÏû•
        with open(self.bridge_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(doc))

    def generate_task_document(self):
        """Í∞úÎ≥Ñ Task Î¨∏ÏÑú ÏÉùÏÑ±"""
        if not self.current_context:
            return

        doc_path = self.context_dir / f"{self.current_context.task_id}.md"

        doc = []
        doc.append(f"# Task: {self.current_context.task_id}")
        doc.append(f"## {self.current_context.task_name}")
        doc.append("")

        # Ï†ÑÏ≤¥ ÎÇ¥Ïö©ÏùÑ JSONÏúºÎ°ú Ï†ÄÏû•
        context_dict = self.current_context.to_dict()

        doc.append("## Ï†ÑÏ≤¥ Ïª®ÌÖçÏä§Ìä∏")
        doc.append("```json")
        doc.append(json.dumps(context_dict, indent=2, ensure_ascii=False))
        doc.append("```")

        with open(doc_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(doc))

    def resume_task(self, task_id: str) -> Optional[TaskContext]:
        """Ïù¥Ï†Ñ Task Ïû¨Í∞ú"""
        conn = sqlite3.connect(self.db_file)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT context_json FROM task_contexts WHERE task_id = ?
        ''', (task_id,))

        result = cursor.fetchone()
        conn.close()

        if result:
            context_dict = json.loads(result[0])
            # TaskContext Í∞ùÏ≤¥Î°ú Î≥ÄÌôò (Î≥µÏû°Ìïú Î°úÏßÅ ÌïÑÏöî)
            print(f"‚úÖ Task {task_id} Ïª®ÌÖçÏä§Ìä∏ Î°úÎìú ÏôÑÎ£å")
            return context_dict

        return None

    def update_task_registry(self, status: str):
        """Task Registry ÏóÖÎç∞Ïù¥Ìä∏"""
        if not self.current_context:
            return

        try:
            with open(self.registry_file, 'r') as f:
                registry = json.load(f)

            task_id = self.current_context.task_id
            if task_id in registry.get('tasks', {}):
                task = registry['tasks'][task_id]
                task['status'] = status
                task['progress'] = self.current_context.progress
                task['last_update'] = datetime.now().isoformat()

                if status == "started":
                    task['started_at'] = self.current_context.started_at.isoformat()
                elif status in ["completed", "failed"]:
                    task['completed_at'] = datetime.now().isoformat()

                # ÎÖ∏Ìä∏ Ï∂îÍ∞Ä
                task['notes'] = '\n'.join(self.current_context.notes[-10:])

                with open(self.registry_file, 'w') as f:
                    json.dump(registry, f, indent=2, ensure_ascii=False)

        except Exception as e:
            print(f"‚ö†Ô∏è Registry ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: {e}")

    def save_to_database(self):
        """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•"""
        if not self.current_context:
            return

        conn = sqlite3.connect(self.db_file)
        cursor = conn.cursor()

        # Bridge Î¨∏ÏÑú ÏùΩÍ∏∞
        bridge_doc = ""
        if self.bridge_file.exists():
            with open(self.bridge_file, 'r') as f:
                bridge_doc = f.read()

        cursor.execute('''
            INSERT OR REPLACE INTO task_contexts
            (task_id, task_name, phase, started_at, completed_at,
             progress, current_step, context_json, bridge_document)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            self.current_context.task_id,
            self.current_context.task_name,
            self.current_context.phase.value,
            self.current_context.started_at,
            self.current_context.completed_at,
            self.current_context.progress,
            self.current_context.current_step,
            json.dumps(self.current_context.to_dict(), ensure_ascii=False),
            bridge_doc
        ))

        conn.commit()
        conn.close()

    def capture_environment(self) -> Dict[str, Any]:
        """ÌòÑÏû¨ ÌôòÍ≤Ω Ï∫°Ï≤ò"""
        env = {
            'python_version': sys.version,
            'cwd': os.getcwd(),
            'project_root': str(self.project_root),
            'timestamp': datetime.now().isoformat()
        }

        # Î∞±ÏóîÎìú ÏÉÅÌÉú Ï≤¥ÌÅ¨
        try:
            import requests
            response = requests.get('http://localhost:8001/health', timeout=1)
            env['backend_status'] = 'online' if response.status_code == 200 else 'offline'
        except:
            env['backend_status'] = 'offline'

        return env

    def capture_file_state(self):
        """Ï§ëÏöî ÌååÏùºÎì§Ïùò ÌòÑÏû¨ ÏÉÅÌÉú Ï∫°Ï≤ò"""
        important_files = [
            'backend/simple_main.py',
            'gumgang-v2/package.json',
            'task_tracking/master_registry.json',
            'protocol_guard_v3.py'
        ]

        for file_path in important_files:
            full_path = self.project_root / file_path
            if full_path.exists():
                self.watched_files[file_path] = self.calculate_file_hash(full_path)

    def calculate_file_hash(self, file_path: Path) -> str:
        """ÌååÏùº Ìï¥Ïãú Í≥ÑÏÇ∞"""
        with open(file_path, 'rb') as f:
            return hashlib.sha256(f.read()).hexdigest()

    def calculate_diff_stats(self, file_path: Path) -> Tuple[int, int]:
        """Î≥ÄÍ≤ΩÎêú Ï§Ñ Ïàò Í≥ÑÏÇ∞"""
        # Í∞ÑÎã®Ìïú Íµ¨ÌòÑ (Ïã§Ï†úÎ°úÎäî git diff ÏÇ¨Ïö© Í∂åÏû•)
        return (0, 0)

def main():
    """CLI Ïù∏ÌÑ∞ÌéòÏù¥Ïä§"""
    bridge = TaskContextBridge()

    if len(sys.argv) > 1:
        command = sys.argv[1]

        if command == '--start':
            if len(sys.argv) >= 4:
                task_id = sys.argv[2]
                task_name = ' '.join(sys.argv[3:])
                bridge.start_task(task_id, task_name)
            else:
                print("Usage: --start <task_id> <task_name>")

        elif command == '--complete':
            bridge.complete_task(success=True)

        elif command == '--fail':
            bridge.complete_task(success=False)

        elif command == '--resume':
            # ÏµúÍ∑º ÎØ∏ÏôÑÎ£å Task Ï∞æÍ∏∞
            print("üìã ÏûëÏóÖ Ïû¨Í∞ú Ï§ë...")
            # Bridge Î¨∏ÏÑú ÌëúÏãú
            if bridge.bridge_file.exists():
                with open(bridge.bridge_file, 'r') as f:
                    print(f.read())

        elif command == '--status':
            if bridge.current_context:
                print(f"ÌòÑÏû¨ Task: {bridge.current_context.task_id}")
                print(f"ÏßÑÌñâÎ•†: {bridge.current_context.progress}%")
                print(f"ÌòÑÏû¨ Îã®Í≥Ñ: {bridge.current_context.current_step}")
            else:
                print("ÌôúÏÑ± Task ÏóÜÏùå")

        else:
            print(f"Unknown command: {command}")
            print("Commands: --start, --complete, --fail, --resume, --status")

    else:
        print("Task Context Bridge System v1.0")
        print("Usage: python task_context_bridge.py [command] [args]")

if __name__ == "__main__":
    main()
