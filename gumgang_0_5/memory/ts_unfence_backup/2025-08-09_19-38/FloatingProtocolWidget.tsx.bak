// @ts-nocheck
'use client';

import React, { useState, useEffect, useRef } from 'react';
import {
  ChevronUp,
  ChevronDown,
  Shield,
  AlertCircle,
  CheckCircle,
  XCircle,
  RotateCcw,
  Pause,
  Play,
  Save,
  Activity,
  GitBranch,
  Clock,
  TrendingUp,
  AlertTriangle,
  Info
} from 'lucide-react';

interface TaskStatus {
  id: string;
  category: string;
  subcategory: string;
  risk: 'S' | 'C' | 'D';
  name: string;
  progress: number;
  status: 'pending' | 'active' | 'completed' | 'failed' | 'paused' | 'rollback';
  checkpoints: string[];
  trustScore: number;
  startTime?: Date;
  eta?: string;
  currentAction?: string;
  logs?: string[];
}

interface ProtocolState {
  trustScore: number;
  currentTask: TaskStatus | null;
  recentTasks: TaskStatus[];
  systemStatus: 'idle' | 'working' | 'warning' | 'error';
  autoSaveEnabled: boolean;
  lastCheckpoint: string;
  gitBranch: string;
  uncommittedChanges: number;
}

const FloatingProtocolWidget: React.FC = () => {
  const [expanded, setExpanded] = useState(false);
  const [protocolState, setProtocolState] = useState<ProtocolState>({
    trustScore: 100,
    currentTask: null,
    recentTasks: [],
    systemStatus: 'idle',
    autoSaveEnabled: true,
    lastCheckpoint: '',
    gitBranch: 'main',
    uncommittedChanges: 0
  });
  const [isConnected, setIsConnected] = useState(false);
  const eventSourceRef = useRef<EventSource | null>(null);
  const wsRef = useRef<WebSocket | null>(null);

  // SSE 연결 (상태 스트리밍)
  useEffect(() => {
    const connectSSE = () => {
      try {
        const eventSource = new EventSource('http://localhost:8001/api/protocol/stream');
        eventSourceRef.current = eventSource;

        eventSource.onopen = () => {
          setIsConnected(true);
          console.log('Protocol SSE connected');
        };

        eventSource.onmessage = (event) => {
          try {
            const data = JSON.parse(event.data);
            updateProtocolState(data);
          } catch (error) {
            console.error('Error parsing SSE data:', error);
          }
        };

        eventSource.onerror = () => {
          setIsConnected(false);
          console.error('SSE connection error');
          // 재연결 시도
          setTimeout(connectSSE, 5000);
        };

        return eventSource;
      } catch (error) {
        console.error('Failed to connect SSE:', error);
        setTimeout(connectSSE, 5000);
      }
    };

    const sse = connectSSE();

    return () => {
      if (eventSourceRef.current) {
        eventSourceRef.current.close();
      }
    };
  }, []);

  // WebSocket 연결 (명령 전송)
  useEffect(() => {
    const connectWS = () => {
      try {
        const ws = new WebSocket('ws://localhost:8001/command');
        wsRef.current = ws;

        ws.onopen = () => {
          console.log('Command WebSocket connected');
        };

        ws.onerror = () => {
          console.error('WebSocket error');
          setTimeout(connectWS, 5000);
        };

        return ws;
      } catch (error) {
        console.error('Failed to connect WebSocket:', error);
        setTimeout(connectWS, 5000);
      }
    };

    const ws = connectWS();

    return () => {
      if (wsRef.current) {
        wsRef.current.close();
      }
    };
  }, []);

  const updateProtocolState = (data: any) => {
    setProtocolState(prev => ({
      ...prev,
      ...data,
      currentTask: data.currentTask ? {
        ...data.currentTask,
        startTime: data.currentTask.startTime ? new Date(data.currentTask.startTime) : undefined
      } : null
    }));
  };

  const sendCommand = (action: string, params?: any) => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify({ action, ...params }));
    } else {
      // Fallback to HTTP
      fetch('http://localhost:8001/api/protocol/command', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action, ...params })
      });
    }
  };

  const getRiskColor = (risk: string) => {
    switch (risk) {
      case 'S': return 'text-green-500';
      case 'C': return 'text-yellow-500';
      case 'D': return 'text-red-500';
      default: return 'text-gray-500';
    }
  };

  const getRiskEmoji = (risk: string) => {
    switch (risk) {
      case 'S': return '✅';
      case 'C': return '⚠️';
      case 'D': return '🚨';
      default: return '❓';
    }
  };

  const getTrustScoreColor = (score: number) => {
    if (score >= 90) return 'text-green-500';
    if (score >= 70) return 'text-yellow-500';
    return 'text-red-500';
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'active': return <Activity className="w-4 h-4 text-blue-500 animate-pulse" />;
      case 'completed': return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'failed': return <XCircle className="w-4 h-4 text-red-500" />;
      case 'paused': return <Pause className="w-4 h-4 text-yellow-500" />;
      default: return <Clock className="w-4 h-4 text-gray-500" />;
    }
  };

  // Compact View (최소화 상태)
  const CompactView = () => (
    <div
      className="bg-gray-900 text-white rounded-lg shadow-2xl p-3 cursor-pointer hover:bg-gray-800 transition-colors"
      onClick={() => setExpanded(true)}
    >
      <div className="flex items-center gap-3">
        {/* 연결 상태 */}
        <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'} animate-pulse`} />

        {/* 신뢰도 점수 */}
        <div className="flex items-center gap-1">
          <Shield className={`w-4 h-4 ${getTrustScoreColor(protocolState.trustScore)}`} />
          <span className={`font-bold ${getTrustScoreColor(protocolState.trustScore)}`}>
            {protocolState.trustScore}%
          </span>
        </div>

        {/* 현재 작업 */}
        {protocolState.currentTask && (
          <>
            <div className="border-l border-gray-600 h-4" />
            <div className="flex items-center gap-2">
              <span className={getRiskColor(protocolState.currentTask.risk)}>
                {getRiskEmoji(protocolState.currentTask.risk)}
              </span>
              <span className="text-xs text-gray-300">
                {protocolState.currentTask.category}.{protocolState.currentTask.subcategory}
              </span>
              <div className="w-20 h-1 bg-gray-700 rounded-full overflow-hidden">
                <div
                  className="h-full bg-blue-500 transition-all duration-300"
                  style={{ width: `${protocolState.currentTask.progress}%` }}
                />
              </div>
              <span className="text-xs text-gray-400">
                {protocolState.currentTask.progress}%
              </span>
            </div>
          </>
        )}

        {/* Git 상태 */}
        {protocolState.uncommittedChanges > 0 && (
          <>
            <div className="border-l border-gray-600 h-4" />
            <div className="flex items-center gap-1">
              <GitBranch className="w-3 h-3 text-orange-400" />
              <span className="text-xs text-orange-400">
                {protocolState.uncommittedChanges}
              </span>
            </div>
          </>
        )}

        <ChevronUp className="w-4 h-4 ml-auto" />
      </div>
    </div>
  );

  // Expanded View (확장 상태)
  const ExpandedView = () => (
    <div className="bg-gray-900 text-white rounded-lg shadow-2xl w-96 max-h-[600px] overflow-hidden flex flex-col">
      {/* Header */}
      <div className="bg-gray-800 p-4 flex items-center justify-between border-b border-gray-700">
        <div className="flex items-center gap-2">
          <Shield className="w-5 h-5" />
          <span className="font-bold">Protocol Guard v3.0</span>
          <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'} animate-pulse`} />
        </div>
        <button
          onClick={() => setExpanded(false)}
          className="text-gray-400 hover:text-white transition-colors"
        >
          <ChevronDown className="w-5 h-5" />
        </button>
      </div>

      {/* Trust Score Bar */}
      <div className="p-4 border-b border-gray-700">
        <div className="flex items-center justify-between mb-2">
          <span className="text-sm text-gray-400">신뢰도 점수</span>
          <span className={`font-bold text-lg ${getTrustScoreColor(protocolState.trustScore)}`}>
            {protocolState.trustScore}%
          </span>
        </div>
        <div className="w-full h-2 bg-gray-700 rounded-full overflow-hidden">
          <div
            className={`h-full transition-all duration-500 ${
              protocolState.trustScore >= 90 ? 'bg-green-500' :
              protocolState.trustScore >= 70 ? 'bg-yellow-500' : 'bg-red-500'
            }`}
            style={{ width: `${protocolState.trustScore}%` }}
          />
        </div>
        {protocolState.trustScore < 70 && (
          <div className="mt-2 flex items-center gap-1 text-xs text-red-400">
            <AlertTriangle className="w-3 h-3" />
            <span>위험: 자동 롤백 대기 중</span>
          </div>
        )}
      </div>

      {/* Current Task */}
      {protocolState.currentTask && (
        <div className="p-4 border-b border-gray-700">
          <div className="flex items-center justify-between mb-2">
            <div className="flex items-center gap-2">
              {getStatusIcon(protocolState.currentTask.status)}
              <span className="font-medium">현재 작업</span>
            </div>
            <span className={`text-sm ${getRiskColor(protocolState.currentTask.risk)}`}>
              {getRiskEmoji(protocolState.currentTask.risk)} {protocolState.currentTask.risk}
            </span>
          </div>

          <div className="bg-gray-800 rounded p-2 mb-3">
            <div className="text-xs text-gray-400 mb-1">{protocolState.currentTask.id}</div>
            <div className="text-sm">{protocolState.currentTask.name}</div>
          </div>

          <div className="mb-3">
            <div className="flex justify-between text-xs text-gray-400 mb-1">
              <span>{protocolState.currentTask.currentAction || '작업 진행 중...'}</span>
              <span>{protocolState.currentTask.progress}%</span>
            </div>
            <div className="w-full h-2 bg-gray-700 rounded-full overflow-hidden">
              <div
                className="h-full bg-blue-500 transition-all duration-300"
                style={{ width: `${protocolState.currentTask.progress}%` }}
              />
            </div>
          </div>

          {/* Control Buttons */}
          <div className="flex gap-2">
            <button
              onClick={() => sendCommand('pause')}
              className="flex-1 bg-gray-700 hover:bg-gray-600 px-3 py-1 rounded text-xs flex items-center justify-center gap-1 transition-colors"
            >
              <Pause className="w-3 h-3" />
              일시정지
            </button>
            <button
              onClick={() => sendCommand('rollback')}
              className="flex-1 bg-gray-700 hover:bg-gray-600 px-3 py-1 rounded text-xs flex items-center justify-center gap-1 transition-colors"
            >
              <RotateCcw className="w-3 h-3" />
              롤백
            </button>
            <button
              onClick={() => sendCommand('checkpoint')}
              className="flex-1 bg-gray-700 hover:bg-gray-600 px-3 py-1 rounded text-xs flex items-center justify-center gap-1 transition-colors"
            >
              <Save className="w-3 h-3" />
              체크포인트
            </button>
          </div>
        </div>
      )}

      {/* Git Status */}
      <div className="p-4 border-b border-gray-700">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <GitBranch className="w-4 h-4 text-gray-400" />
            <span className="text-sm">{protocolState.gitBranch}</span>
          </div>
          <div className="flex items-center gap-3">
            {protocolState.uncommittedChanges > 0 && (
              <span className="text-xs text-orange-400">
                {protocolState.uncommittedChanges} 변경사항
              </span>
            )}
            <label className="flex items-center gap-1 text-xs">
              <input
                type="checkbox"
                checked={protocolState.autoSaveEnabled}
                onChange={(e) => sendCommand('toggleAutoSave', { enabled: e.target.checked })}
                className="w-3 h-3"
              />
              자동저장
            </label>
          </div>
        </div>
        {protocolState.lastCheckpoint && (
          <div className="mt-2 text-xs text-gray-500">
            마지막 체크포인트: {protocolState.lastCheckpoint}
          </div>
        )}
      </div>

      {/* Recent Tasks */}
      <div className="flex-1 overflow-y-auto p-4">
        <div className="text-sm font-medium mb-2">최근 작업</div>
        <div className="space-y-1">
          {protocolState.recentTasks.map(task => (
            <div key={task.id} className="flex items-center gap-2 text-xs text-gray-400">
              {getStatusIcon(task.status)}
              <span className={getRiskColor(task.risk)}>
                {getRiskEmoji(task.risk)}
              </span>
              <span className="truncate">{task.id}</span>
              {task.status === 'completed' && (
                <CheckCircle className="w-3 h-3 text-green-500 ml-auto" />
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Footer Status */}
      <div className="bg-gray-800 px-4 py-2 flex items-center justify-between text-xs text-gray-400">
        <div className="flex items-center gap-2">
          <Info className="w-3 h-3" />
          <span>시스템: {protocolState.systemStatus}</span>
        </div>
        <div className="flex items-center gap-1">
          <TrendingUp className="w-3 h-3" />
          <span>CPU: 12%</span>
          <span>|</span>
          <span>RAM: 2.3GB</span>
        </div>
      </div>
    </div>
  );

  return (
    <div className="fixed bottom-4 right-4 z-50">
      {expanded ? <ExpandedView /> : <CompactView />}
    </div>
  );
};

export default FloatingProtocolWidget;
